import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy import signal,stats
%matplotlib

###################获取数据###############################
Analog = pd.read_csv(r'D:\2-1.csv') .astype("float32")#获取波形数据

Analog_Time = Analog.iloc[:,0]#读出模拟数据时间列
Analog_Data = Analog.iloc[:,1]#读出模拟数据列

###################需要改变的参数###############################
fs = 781250    #设定模拟信号采样率，fs>5fh；和saleae logic模拟通道的采样频率一致
plus = 0.008  #设定数字信号阈值，等于数字信号半周期

####################模拟处理################################
#使用6阶巴特沃斯低通滤波器对波形进行滤波
fh = 3500     #低通滤波器的截止频率
b,a = signal.butter(6, fh, 'lowpass',fs=fs)
Analog_Data_flt = signal.filtfilt(b,a,Analog_Data)

#依据图形选取阈值
threshold_Analog =(Analog_Data_flt.max()+Analog_Data_flt.min())/2.0

#计算上升沿，过阈值的点。
crosses_up = np.where(np.diff(np.sign(Analog_Data_flt - threshold_Analog)) > 1)[0]
#计算下降沿，过阈值的点。
crosses_down = np.where(np.diff(np.sign(Analog_Data_flt - threshold_Analog)) < -1)[0]

Analog_Time_up = Analog.iloc[crosses_up,0]#读出模拟数据时间列
Analog_Time_down = Analog.iloc[crosses_down,0]#读出模拟数据时间列

Analog_Time_up=np.array(Analog_Time_up)
Analog_Time_down=np.array(Analog_Time_down)

##部分通道存在下降沿数据误判为上升沿数据情况，所以多加个时间判定，相邻时间必须大于周期的2/3
#通道3会用到
Analog_Time_updata=[]
dd = 0
for item in range(0,len(Analog_Time_up)):
    sh=Analog_Time_up[item]
    if (sh - dd >=0.075):
        dd = sh
        Analog_Time_updata.append(sh)

Analog_Time_downdata=[]
dd = 0
for item in range(0,len(Analog_Time_down)):
    sh=Analog_Time_down[item]
    if (sh - dd >=0.075):
        dd = sh
        Analog_Time_downdata.append(sh)  

####################输出时间戳###############################
if(1):
    Analog_Time_up=pd.DataFrame(Analog_Time_up)#转换成DataFrame格式
    Analog_Time_down=pd.DataFrame(Analog_Time_down)#转换成DataFrame格式
    path = pd.ExcelWriter(r'D:\2-1.xlsx',engine = 'xlsxwriter')#设置输出文件路径

    Analog_Time_updata.to_excel(path,sheet_name="模拟上升沿")
    Analog_Time_downdata.to_excel(path,sheet_name="模拟下降沿")
    path.save()#保存
else:
    #print(threshold_Analog)
    #plt.plot(Analog_Time,Analog_Data,'ro',Digital_Time,Digital_Data,'bs')
    #plt.plot(crosses_up,np.ones(crosses_up.shape[0])*threshold_Analog,'*')
    #plt.plot(crosses_down,np.ones(crosses_down.shape[0])*threshold_Analog,'*')
    #plt.show()

    plt.plot(time_up,np.ones(time_up.shape[0])*threshold_Analog,'*')#绘制波形，星号位置为过阈值位置
    plt.plot(time_down,np.ones(time_down.shape[0])*threshold_Analog,'*')
    plt.plot(dig_time_stemp,np.ones(len(dig_time_stemp))*threshold_Analog,marker='h')
    plt.show()